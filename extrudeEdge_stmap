# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named extrudeEdgeStmapExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from extrudeEdgeStmapExt import *
except ImportError:
    pass

def getPluginID():
    return "extrudeEdgeStmap"

def getLabel():
    return "extrudeEdgeStmap"

def getVersion():
    return 1

def getGrouping():
    return "Transform"

def getPluginDescription():
    return "This can extrude edges of a certain target in the scan"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<font size=\"6\" color=\"#000000\" face=\"Droid Sans\">\n</font>")
        del param


    # Create the user parameters
    lastNode.ExtrudeEdge_stMap = lastNode.createPageParam("ExtrudeEdge_stMap", "ExtrudeEdge_stMap")
    param = lastNode.createSeparatorParam("sep1", "")

    # Add the param to the page
    lastNode.ExtrudeEdge_stMap.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep1 = param
    del param

    param = lastNode.createDouble2DParam("Blur1size", "Extrude ")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(100, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.ExtrudeEdge_stMap.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Blur1size = param
    del param

    param = lastNode.createSeparatorParam("sep2", "")

    # Add the param to the page
    lastNode.ExtrudeEdge_stMap.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep2 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['ExtrudeEdge_stMap', 'Settings', 'Node'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "LensDistortion1"
    lastNode = app.createNode("net.sf.openfx.LensDistortion", 3, group)
    lastNode.setScriptName("LensDistortion1")
    lastNode.setLabel("LensDistortion1")
    lastNode.setPosition(9169, 4009)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupLensDistortion1 = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("Project")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    param = lastNode.getParam("outputMode")
    if param is not None:
        param.set("STMap")
        del param

    del lastNode
    # End of node "LensDistortion1"

    # Start of node "Shuffle4"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle4")
    lastNode.setLabel("Shuffle4")
    lastNode.setPosition(9342, 4008)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle4 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle4"

    # Start of node "Premult4"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult4")
    lastNode.setLabel("Premult4")
    lastNode.setPosition(9342, 4080)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult4 = lastNode

    del lastNode
    # End of node "Premult4"

    # Start of node "Blur1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(9342, 4152)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    del lastNode
    # End of node "Blur1"

    # Start of node "Merge2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2_2")
    lastNode.setLabel("Merge2_2")
    lastNode.setPosition(9169, 4141)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2_2 = lastNode

    del lastNode
    # End of node "Merge2_2"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(9006, 3915)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "STMap2"
    lastNode = app.createNode("net.sf.openfx.STMap", 2, group)
    lastNode.setScriptName("STMap2")
    lastNode.setLabel("STMap2")
    lastNode.setPosition(8961, 4153)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupSTMap2 = lastNode

    param = lastNode.getParam("channelUChoice")
    if param is not None:
        param.setValue("UV.r")
        del param

    param = lastNode.getParam("channelVChoice")
    if param is not None:
        param.setValue("UV.g")
        del param

    param = lastNode.getParam("channelAChoice")
    if param is not None:
        param.setValue("UV.a")
        del param

    del lastNode
    # End of node "STMap2"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(9214, 3915)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Scan"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Scan")
    lastNode.setLabel("Scan")
    lastNode.setPosition(8961, 3760)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupScan = lastNode

    del lastNode
    # End of node "Scan"

    # Start of node "matte"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("matte")
    lastNode.setLabel("matte")
    lastNode.setPosition(9552, 4008)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupmatte = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<font size=\"6\" color=\"#000000\" face=\"Droid Sans\">matte</font>")
        del param

    del lastNode
    # End of node "matte"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(8961, 4264)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Output2"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output2")
    lastNode.setPosition(8961, 4350)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput2 = lastNode

    del lastNode
    # End of node "Output2"

    # Now that all nodes are created we can connect them together, restore expressions
    groupLensDistortion1.connectInput(0, groupDot8)
    groupShuffle4.connectInput(0, groupLensDistortion1)
    groupShuffle4.connectInput(1, groupmatte)
    groupPremult4.connectInput(0, groupShuffle4)
    groupBlur1.connectInput(0, groupPremult4)
    groupMerge2_2.connectInput(0, groupLensDistortion1)
    groupMerge2_2.connectInput(1, groupBlur1)
    groupDot5.connectInput(0, groupScan)
    groupSTMap2.connectInput(0, groupMerge2_2)
    groupSTMap2.connectInput(1, groupDot5)
    groupDot8.connectInput(0, groupDot5)
    groupOutput1.connectInput(0, groupSTMap2)
    groupOutput2.connectInput(0, groupOutput1)

    param = groupBlur1.getParam("size")
    group.getParam("Blur1size").setAsAlias(param)
    del param

    try:
        extModule = sys.modules["extrudeEdgeStmapExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
